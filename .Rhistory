if(n.split==1) MEs=unlist(All.per[All.per$permu==0,-c(1:2)]) else {
MEs=rbind(colMeans(All.per[All.per$permu==0,-c(1:2)]),
apply(All.per[All.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(All.per$permu==0)))
rownames(MEs)=c("mean","se") }
colnames(Individual.per)=c("split","permu",colnames(Individual.per)[-c(1:2)])
Individual.per=data.frame(Individual.per)
if(n.split==1) Com_MEs=unlist(Individual.per[Individual.per$permu==0,-c(1:2)]) else {
Com_MEs_mean=colMeans(Individual.per[Individual.per$permu==0,-c(1:2)])
Com_MEs_se=apply(Individual.per[Individual.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(Individual.per$permu==0))
Com_MEs= rbind(Com_MEs_mean,
Com_MEs_mean-Com_MEs_se*1.96,
Com_MEs_mean+Com_MEs_se*1.96)
rownames(Com_MEs)=c("Mean", "Lower_CI","Upper_CI")
}
Effect.estimates=list(MEs,Com_MEs)
names(Effect.estimates)=c('Esitmated Causal Effects', 'Compontent-wise ME')
if(!is.null(num.per)) {
### Testing
OMD=NULL
for(ii in unique(All.per$permu)) OMD=c(OMD,mean(All.per[All.per$permu==ii,4]))
if(n.split>1) {
CMD=NULL
for(ii in unique(Individual.per$permu)) CMD=rbind(CMD,colMeans(Individual.per[Individual.per$permu==ii,-c(1:2)])) } else CMD=
Individual.per[,-c(1:2)]
CMD=rowSums(CMD^2)
p.values=c(sum(abs(OMD)>=abs(OMD[1]))/length(OMD),
sum(CMD>=CMD[1])/length(CMD))
names(p.values)=c("OME","CME")
Effect.estimates$Test= p.values
}
Effect.estimates
#require(Compositional)
#require(nloptr)
beta.estimates=function(Treatment,otu.com,penalty.lambda=seq(0,1,0.1),
low.bound=NULL,up.bound=NULL)
{
### using a small value to replace 0
otu.com=t(apply(otu.com,1,function(x) {if(min(x)==0) return((x+0.00001)/sum(x+0.00001)) else return(x)}))
sample.num=nrow(otu.com);num.otu=ncol(otu.com)
beta0.intial=diri.est(otu.com[Treatment==0,],type = "mle")$param
beta.initial=c(beta0.intial,rep(0,num.otu))
BIC=estimates=NULL
for(lambda.dirichlet in penalty.lambda)
{
qq=nloptr( x0=beta.initial,
toOpt2,
lb=low.bound,
ub=up.bound,
opts =list("algorithm" = "NLOPT_LD_MMA",
"xtol_rel" = 1.0e-4,
"maxeval"= 5000),
otu.com=otu.com,Treatment=Treatment,lambda.dirichlet=lambda.dirichlet)
if(qq$status %in% c(1,3,4)){
estimates1=round(qq$solution,3)
estimates=rbind(estimates,estimates1)
BIC=c(BIC,log(sample.num)*sum(estimates1!=0)-
2*likelihood2.org(estimates1,Treatment=Treatment,otu.com=otu.com))
}}
if(length(BIC)==0) beta.estimates=beta.initial else beta.estimates=estimates[which.min(BIC),]
return(beta.estimates)
}
### using a small value to replace 0
otu.com=t(apply(otu.com,1,function(x) {if(min(x)==0) return((x+0.00001)/sum(x+0.00001)) else return(x)}))
### Splitting strategy for post-selection estimation
All.per=Individual.per=NULL
for(tt in 1:n.split) {
### variable selection
Training=c(sample(which(Treatment==1),ceiling(sum(Treatment==1)/2)),
sample(which(Treatment==0),ceiling(sum(Treatment==0)/2)))
Treatment.training=Treatment[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,0, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,0, CausalEffect[[2]]));
if(!is.null(num.per)) {
for(rr in 1:num.per)
{
Treatment.per=sample(Treatment,length(Treatment))
outcome.per=sample(outcome, length(outcome))
Treatment.training=Treatment.per[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome.per[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment.per[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome.per[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,rr, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,rr, CausalEffect[[2]]));
}}}
### Effects
colnames(All.per)=c("split","permu",colnames(All.per)[-c(1:2)])
All.per=data.frame(All.per)
if(n.split==1) MEs=unlist(All.per[All.per$permu==0,-c(1:2)]) else {
MEs=rbind(colMeans(All.per[All.per$permu==0,-c(1:2)]),
apply(All.per[All.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(All.per$permu==0)))
rownames(MEs)=c("mean","se") }
colnames(Individual.per)=c("split","permu",colnames(Individual.per)[-c(1:2)])
Individual.per=data.frame(Individual.per)
if(n.split==1) Com_MEs=unlist(Individual.per[Individual.per$permu==0,-c(1:2)]) else {
Com_MEs_mean=colMeans(Individual.per[Individual.per$permu==0,-c(1:2)])
Com_MEs_se=apply(Individual.per[Individual.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(Individual.per$permu==0))
Com_MEs= rbind(Com_MEs_mean,
Com_MEs_mean-Com_MEs_se*1.96,
Com_MEs_mean+Com_MEs_se*1.96)
rownames(Com_MEs)=c("Mean", "Lower_CI","Upper_CI")
}
Effect.estimates=list(MEs,Com_MEs)
names(Effect.estimates)=c('Esitmated Causal Effects', 'Compontent-wise ME')
if(!is.null(num.per)) {
### Testing
OMD=NULL
for(ii in unique(All.per$permu)) OMD=c(OMD,mean(All.per[All.per$permu==ii,4]))
if(n.split>1) {
CMD=NULL
for(ii in unique(Individual.per$permu)) CMD=rbind(CMD,colMeans(Individual.per[Individual.per$permu==ii,-c(1:2)])) } else CMD=
Individual.per[,-c(1:2)]
CMD=rowSums(CMD^2)
p.values=c(sum(abs(OMD)>=abs(OMD[1]))/length(OMD),
sum(CMD>=CMD[1])/length(CMD))
names(p.values)=c("OME","CME")
Effect.estimates$Test= p.values
}
Effect.estimates
num.per=10
### using a small value to replace 0
otu.com=t(apply(otu.com,1,function(x) {if(min(x)==0) return((x+0.00001)/sum(x+0.00001)) else return(x)}))
### Splitting strategy for post-selection estimation
All.per=Individual.per=NULL
for(tt in 1:n.split) {
### variable selection
Training=c(sample(which(Treatment==1),ceiling(sum(Treatment==1)/2)),
sample(which(Treatment==0),ceiling(sum(Treatment==0)/2)))
Treatment.training=Treatment[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,0, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,0, CausalEffect[[2]]));
if(!is.null(num.per)) {
for(rr in 1:num.per)
{
Treatment.per=sample(Treatment,length(Treatment))
outcome.per=sample(outcome, length(outcome))
Treatment.training=Treatment.per[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome.per[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment.per[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome.per[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,rr, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,rr, CausalEffect[[2]]));
}}}
### Effects
colnames(All.per)=c("split","permu",colnames(All.per)[-c(1:2)])
All.per=data.frame(All.per)
if(n.split==1) MEs=unlist(All.per[All.per$permu==0,-c(1:2)]) else {
MEs=rbind(colMeans(All.per[All.per$permu==0,-c(1:2)]),
apply(All.per[All.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(All.per$permu==0)))
rownames(MEs)=c("mean","se") }
colnames(Individual.per)=c("split","permu",colnames(Individual.per)[-c(1:2)])
Individual.per=data.frame(Individual.per)
if(n.split==1) Com_MEs=unlist(Individual.per[Individual.per$permu==0,-c(1:2)]) else {
Com_MEs_mean=colMeans(Individual.per[Individual.per$permu==0,-c(1:2)])
Com_MEs_se=apply(Individual.per[Individual.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(Individual.per$permu==0))
Com_MEs= rbind(Com_MEs_mean,
Com_MEs_mean-Com_MEs_se*1.96,
Com_MEs_mean+Com_MEs_se*1.96)
rownames(Com_MEs)=c("Mean", "Lower_CI","Upper_CI")
}
Effect.estimates=list(MEs,Com_MEs)
names(Effect.estimates)=c('Esitmated Causal Effects', 'Compontent-wise ME')
if(!is.null(num.per)) {
### Testing
OMD=NULL
for(ii in unique(All.per$permu)) OMD=c(OMD,mean(All.per[All.per$permu==ii,4]))
if(n.split>1) {
CMD=NULL
for(ii in unique(Individual.per$permu)) CMD=rbind(CMD,colMeans(Individual.per[Individual.per$permu==ii,-c(1:2)])) } else CMD=
Individual.per[,-c(1:2)]
CMD=rowSums(CMD^2)
p.values=c(sum(abs(OMD)>=abs(OMD[1]))/length(OMD),
sum(CMD>=CMD[1])/length(CMD))
names(p.values)=c("OME","CME")
Effect.estimates$Test= p.values
}
Effect.estimates
CMD
num.per
########### generation data
### Sample size and number of mediators
sample.num=100
otu.num=10
###Treatment
Treatment=rep(c(0,1),each=sample.num/2)
### parameters
beta0=c(0.6, -0.3, 0.8, -1.4, -1.2, -1.4, -1.3, -1.0, -0.2, 0.6)
betaT=rep(0,otu.num)
betaT[c(1,3)]=c(0.4,0.2)
alpha0=0
alphaT=1
alphaZ=alphaC=rep(0,otu.num)
alphaZ[c(1,3)]=c(0.7,-0.7)
alphaC[c(1,3)]=c(0.15,-0.15)
############Microbiome data
library(dirmult)
X=cbind(rep(1,sample.num),Treatment)
b=cbind(beta0,betaT)
gamma.simu=exp(X %*% t(b))
otu.com=t(apply(gamma.simu,1,rdirichlet,n=1))
##################Outcome  data
X=cbind(rep(1,sample.num),Treatment,log(otu.com),log(otu.com)*Treatment)
b=c(alpha0,alphaT,alphaZ,alphaC)
outcome=c(b%*%t(X)+rnorm(sample.num,mean = 0, sd =1))
##### SparseMCMM function
SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=10)
SparseMCMM=function(Treatment,otu.com,outcome,n.split=10,
dirichlet.penalty=seq(0,1,0.1),
lm.penalty1=seq(0,1,0.1),lm.penalty2=seq(0,2,0.2),
low.bound1=NULL,up.bound1=NULL,low.bound2=NULL,up.bound2=NULL,
num.per=NULL)
{
### using a small value to replace 0
otu.com=t(apply(otu.com,1,function(x) {if(min(x)==0) return((x+0.00001)/sum(x+0.00001)) else return(x)}))
### Splitting strategy for post-selection estimation
All.per=Individual.per=NULL
for(tt in 1:n.split) {
### variable selection
Training=c(sample(which(Treatment==1),ceiling(sum(Treatment==1)/2)),
sample(which(Treatment==0),ceiling(sum(Treatment==0)/2)))
Treatment.training=Treatment[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,0, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,0, CausalEffect[[2]]));
if(!is.null(num.per)) {
for(rr in 1:num.per) {
Treatment.per=sample(Treatment,length(Treatment))
outcome.per=sample(outcome, length(outcome))
Treatment.training=Treatment.per[Training]
otu.com.training=otu.com[Training,]
outcome.training=outcome.per[Training]
betas=beta.estimates(Treatment.training,otu.com.training,penalty.lambda=dirichlet.penalty,
low.bound=low.bound2,up.bound=up.bound2)
beta.estimation=rep(0,length(betas))
Index_beta=betas[-c(1:ncol(otu.com))]==0
if(sum(Index_beta)>0) Index_0=which(Index_beta) else Index_0=NULL
Alpha.Est0=alpha.estimates(Treatment.training,otu.com.training,outcome.training,
penalty.lambda1=lm.penalty1,penalty.lambda2=lm.penalty2,
low.bound=low.bound1,up.bound=up.bound1)
Index_alpha=Alpha.Est0==0
if(sum(Index_alpha)>0) Index_alpha0=which(Index_alpha) else Index_alpha0=NULL
alpha.estimation=rep(0,length(Alpha.Est0))
### post-selection estimation
Treatment.est=Treatment.per[-Training]
otu.com.est=otu.com[-Training,]
outcome.est=outcome.per[-Training]
est.beta=beta.estimates2(Treatment.est,otu.com.est,Index_0)
if(!is.null(Index_0))  beta.estimation[-c(Index_0+ncol(otu.com))]=est.beta else  beta.estimation=est.beta
est.alpha=alpha.estimates2(Treatment.est,otu.com.est,outcome.est,Index_alpha0)
if(!is.null(Index_alpha0))  alpha.estimation[-Index_alpha0]=est.alpha else  alpha.estimation=est.alpha
### mediation effect
CausalEffect=CausalE(otu.com,alpha.estimation=alpha.estimation,
beta.estimation=beta.estimation)
All.per=rbind(All.per, c(tt,rr, CausalEffect[[1]]));
Individual.per=rbind(Individual.per, c(tt,rr, CausalEffect[[2]]));
}}}
### Effects
colnames(All.per)=c("split","permu",colnames(All.per)[-c(1:2)])
All.per=data.frame(All.per)
if(n.split==1) MEs=unlist(All.per[All.per$permu==0,-c(1:2)]) else {
MEs=rbind(colMeans(All.per[All.per$permu==0,-c(1:2)]),
apply(All.per[All.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(All.per$permu==0)))
rownames(MEs)=c("mean","se") }
colnames(Individual.per)=c("split","permu",colnames(Individual.per)[-c(1:2)])
Individual.per=data.frame(Individual.per)
if(n.split==1) Com_MEs=unlist(Individual.per[Individual.per$permu==0,-c(1:2)]) else {
Com_MEs_mean=colMeans(Individual.per[Individual.per$permu==0,-c(1:2)])
Com_MEs_se=apply(Individual.per[Individual.per$permu==0,-c(1:2)], 2, sd)/sqrt(sum(Individual.per$permu==0))
Com_MEs= rbind(Com_MEs_mean,
Com_MEs_mean-Com_MEs_se*1.96,
Com_MEs_mean+Com_MEs_se*1.96)
rownames(Com_MEs)=c("Mean", "Lower_CI","Upper_CI")
}
Effect.estimates=list(MEs,Com_MEs)
names(Effect.estimates)=c('Esitmated Causal Effects', 'Compontent-wise ME')
if(!is.null(num.per)) {
### Testing
OMD=NULL
for(ii in unique(All.per$permu)) OMD=c(OMD,mean(All.per[All.per$permu==ii,4]))
if(n.split>1) {
CMD=NULL
for(ii in unique(Individual.per$permu)) CMD=rbind(CMD,colMeans(Individual.per[Individual.per$permu==ii,-c(1:2)])) } else CMD=
Individual.per[,-c(1:2)]
CMD=rowSums(CMD^2)
p.values=c(sum(abs(OMD)>=abs(OMD[1]))/length(OMD),
sum(CMD>=CMD[1])/length(CMD))
names(p.values)=c("OME","CME")
Effect.estimates$Test= p.values
}
return(Effect.estimates)
}
########### generation data
### Sample size and number of mediators
sample.num=100
otu.num=10
###Treatment
Treatment=rep(c(0,1),each=sample.num/2)
### parameters
beta0=c(0.6, -0.3, 0.8, -1.4, -1.2, -1.4, -1.3, -1.0, -0.2, 0.6)
betaT=rep(0,otu.num)
betaT[c(1,3)]=c(0.4,0.2)
alpha0=0
alphaT=1
alphaZ=alphaC=rep(0,otu.num)
alphaZ[c(1,3)]=c(0.7,-0.7)
alphaC[c(1,3)]=c(0.15,-0.15)
############Microbiome data
library(dirmult)
X=cbind(rep(1,sample.num),Treatment)
b=cbind(beta0,betaT)
gamma.simu=exp(X %*% t(b))
otu.com=t(apply(gamma.simu,1,rdirichlet,n=1))
##################Outcome  data
X=cbind(rep(1,sample.num),Treatment,log(otu.com),log(otu.com)*Treatment)
b=c(alpha0,alphaT,alphaZ,alphaC)
outcome=c(b%*%t(X)+rnorm(sample.num,mean = 0, sd =1))
##### SparseMCMM function
SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=10)
########### generation data
### Sample size and number of mediators
sample.num=100
otu.num=10
###Treatment
Treatment=rep(c(0,1),each=sample.num/2)
### parameters
beta0=c(0.6, -0.3, 0.8, -1.4, -1.2, -1.4, -1.3, -1.0, -0.2, 0.6)
betaT=rep(0,otu.num)
betaT[c(1,3)]=c(0.4,0.2)
alpha0=0
alphaT=1
alphaZ=alphaC=rep(0,otu.num)
alphaZ[c(1,3)]=c(0.7,-0.7)
alphaC[c(1,3)]=c(0.15,-0.15)
############Microbiome data
library(dirmult)
X=cbind(rep(1,sample.num),Treatment)
b=cbind(beta0,betaT)
gamma.simu=exp(X %*% t(b))
otu.com=t(apply(gamma.simu,1,rdirichlet,n=1))
##################Outcome  data
X=cbind(rep(1,sample.num),Treatment,log(otu.com),log(otu.com)*Treatment)
b=c(alpha0,alphaT,alphaZ,alphaC)
outcome=c(b%*%t(X)+rnorm(sample.num,mean = 0, sd =1))
set.seed(1234)
res=SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=NULL)
res
set.seed(1234)
res=SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=NULL)
res
sample.num=100
otu.num=10
###Treatment
Treatment=rep(c(0,1),each=sample.num/2)
### parameters
beta0=c(0.6, -0.3, 0.8, -1.4, -1.2, -1.4, -1.3, -1.0, -0.2, 0.6)
betaT=rep(0,otu.num)
betaT[c(1,3)]=c(0.4,0.2)
alpha0=0
alphaT=1
alphaZ=alphaC=rep(0,otu.num)
alphaZ[c(1,3)]=c(0.7,-0.7)
alphaC[c(1,3)]=c(0.15,-0.15)
############Microbiome data
library(dirmult)
X=cbind(rep(1,sample.num),Treatment)
b=cbind(beta0,betaT)
gamma.simu=exp(X %*% t(b))
otu.com=t(apply(gamma.simu,1,rdirichlet,n=1))
##################Outcome  data
X=cbind(rep(1,sample.num),Treatment,log(otu.com),log(otu.com)*Treatment)
b=c(alpha0,alphaT,alphaZ,alphaC)
outcome=c(b%*%t(X)+rnorm(sample.num,mean = 0, sd =1))
set.seed(123)
res=SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=NULL)
res
set.seed(123)
res=SparseMCMM(Treatment,otu.com,outcome,n.split=10,
num.per=NULL)
res
set.seed(123)
res=SparseMCMM(Treatment,otu.com,outcome,n.split=1,
num.per=200)
use_mit_license()
usethis::use_github()
usethis::use_git()
usethis::use_package("Compositional")
usethis::use_package("stats")
usethis::use_package("nloptr")
roxygen2::update_collate
library(roxygen2)
R CMD check
otu.com[otu.com>0]
dim(otu.com)
dim(otu.com[otu.com>0])
min(otu.com[otu.com>0])
